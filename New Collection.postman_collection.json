{
	"info": {
		"_postman_id": "82684b95-2209-436e-9cc5-5cb0b95c51d8",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34580356"
	},
	"item": [
		{
			"name": "GET Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_get_authors(self):\r",
							"        response = requests.get(f\"{self.base_url}/Authors\")\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"        self.assertTrue(isinstance(response.json(), list))\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_post_author(self):\r",
							"        payload = {\r",
							"            \"id\": 0,\r",
							"            \"idBook\": 0,\r",
							"            \"firstName\": \"John\",\r",
							"            \"lastName\": \"Doe\"\r",
							"        }\r",
							"        response = requests.post(f\"{self.base_url}/Authors\", json=payload)\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Book ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_get_authors_by_book_id(self):\r",
							"        book_id = 1\r",
							"        response = requests.get(f\"{self.base_url}/Authors/authors/books/{book_id}\")\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"        self.assertTrue(isinstance(response.json(), list))\r",
							"\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors/authors/books/{idBook}",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"authors",
						"books",
						"{idBook}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Authors ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_get_author_by_id(self):\r",
							"        author_id = 1 \r",
							"        response = requests.get(f\"{self.base_url}/Authors/{author_id}\")\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors/{id}",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Authors ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_update_author(self):\r",
							"        author_id = 2\r",
							"        payload = {\r",
							"            \"id\": author_id,\r",
							"            \"idBook\": 0,\r",
							"            \"firstName\": \"Shota\",\r",
							"            \"lastName\": \"Rustaveli\"\r",
							"        }\r",
							"        response = requests.put(f\"{self.base_url}/Authors/{author_id}\", json=payload)\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors/{id}",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{id}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Authors Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"import unittest\r",
							"import requests\r",
							"\r",
							"class TestAuthorsAPI(unittest.TestCase):\r",
							"    base_url = \"https://fakerestapi.azurewebsites.net/api/v1\"\r",
							"\r",
							"    def test_delete_author(self):\r",
							"        author_id = 1 \r",
							"        response = requests.delete(f\"{self.base_url}/Authors/{author_id}\")\r",
							"        self.assertEqual(response.status_code, 200)\r",
							"\r",
							"if __name__ == '__main__':\r",
							"    unittest.main()\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://fakerestapi.azurewebsites.net/api/v1/Authors/{id}",
					"protocol": "https",
					"host": [
						"fakerestapi",
						"azurewebsites",
						"net"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{id}"
					]
				}
			},
			"response": []
		}
	]
}